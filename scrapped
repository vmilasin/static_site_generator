'''

## split_nodes_delimiter using single split on next delimiter - resource intesive
def split_nodes_delimiter(old_nodes):
    # If a TextNode contains different formatting (e.g.: italic text that is already bold), create child TextNode objects with their specific type defined

    # Check the delimiters, and get the defined type
    valid_delimiters = ["**", "__", "*", "_", "~~", "`"]    
    textnode_type = lambda delimiter: {
        "" : "text",
        "**" : "bold",
        "__": "bold",
        "*" : "italic",
        "_" : "italic",
        "~~" : "striketrough",
        "`" : "code",
        #"[title]" : "link",
        #"!" : "image"
    }.get(delimiter, "Unknown")


    # Mechanism to check if a node contains any valid delimiters
    def check_nodes_for_delimiters(node, used_delimiters_list):
        used_delimiters = []
        for valid_delimiter in used_delimiters_list:
            if valid_delimiter in node.text:
                used_delimiters.append(valid_delimiter)

        if len(used_delimiters) == 0:
            return False
        
        else:
            used_delimiters = sorted(used_delimiters, key=lambda x: node.text.index(x))                
            return [used_delimiters, used_delimiters[0]]  


    # Iterate over all TextNodes in (starting with old_nodes)
    def iterate_over_nodes(nodes, delimiters_used=valid_delimiters):
        new_nodes = []
        for node in nodes:
            node_text = node.text
            node_type = node.text_type
            used_delimiters = check_nodes_for_delimiters(node, delimiters_used)[0]
            next_delimiter = check_nodes_for_delimiters(node, delimiters_used)[1]
            

            if not used_delimiters:
                # If no delimiters were found in the node, just append it to new_nodes as-is
                new_nodes.append(TextNode(node_text, node_type))
            
            else:
                # Otherwise, split the node on the next delimiter, and append its children
                children = node_text.split(next_delimiter, maxsplit=1)
                # First part of text is of the default type
                special_format = False
                                
                for child in children:
                    # Check if the child segment contains text
                    if child:
                        # If the child is of the default type, just add it to new_nodes as-is
                        if not special_format:
                            new_nodes.append(TextNode(child, node_type))
                        # Otherwise, add the child to new_nodes with its respective type
                        else:
                            new_nodes.append(TextNode(child, textnode_type(next_delimiter)))
                        # We are either adding default type text, or we have come to the special type text that needs to be reformatted
                        # Either way, when we are done adding the previous child part, the next one type will be opposite than the previous part
                        special_format = not special_format
                # Iterate again until there are no delimiters used
                iterate_over_nodes(new_nodes, used_delimiters)
   
        return new_nodes
    
    iterate_over_nodes(old_nodes)



## Use iteration for split_nodes_delimiter
def split_code(old_nodes=old_nodes, delimiter=delimiter, alt_type=alternate_type(delimiter=delimiter), text_type=text_type, start=0, end=0, new_nodes=[]):
    for x in old_nodes.text[range(0, len(old_nodes.text))]:
        if x == delimiter:
            end = start
            new_nodes.append(TextNode(old_nodes.text[:start], text_type))
        else:
            start += 1
    for x in old_nodes.text[range(start+1, len(old_nodes.text))]:
        if x == delimiter:
            start = end
            new_nodes.append(TextNode(old_nodes.text[start+1:end], alt_type))
        else:
            end += 1

    if end > len(old_nodes.text):
        raise Exception(f"Invalid markdown syntax, please close your {alt_type} block")
    elif start < len(old_nodes.text):
        split_code(old_nodes=old_nodes, delimiter=delimiter, alt_type=alternate_type(delimiter=delimiter), text_type=text_type, start=start, end=end, new_nodes=new_nodes)
        
    result = []
    for node in new_nodes:
        result.extend(node.text)


'''